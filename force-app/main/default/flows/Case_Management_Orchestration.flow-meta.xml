<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>64.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <decisions>
        <name>Check_if_a_Case_is_Escalated</name>
        <label>Check if a Case is Escalated</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>Check_if_Case_is_Closed</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Case_is_Escalated</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Escalated</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Approved for Escalation</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Escalation_Process</targetReference>
            </connector>
            <label>Case is Escalated</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_Case_is_Closed</name>
        <label>Check if Case is Closed</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Case_is_Closed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Survey_and_Closure</targetReference>
            </connector>
            <label>Case is Closed</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_Case_is_New_or_Existing</name>
        <label>Check if Case is New or Existing</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>Initial_Resolution</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Existing Case</defaultConnectorLabel>
        <rules>
            <name>New_Case</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>New</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Triage_and_Route</targetReference>
            </connector>
            <label>New Case</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <name>superVisorUser</name>
        <dataType>String</dataType>
        <expression>IF( ISBLANK({!$Record.Tier_2_Agent__c}), {!$Record.OwnerId}, {!$Record.Tier_2_Agent__c})</expression>
    </formulas>
    <interviewLabel>Case Management Orchestration {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Case Management Orchestration</label>
    <orchestratedStages>
        <name>Error_Handling_Stage</name>
        <label>Error Handling Stage</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Update_Error_Details</name>
            <actionName>Update_Error_Details_on_Case_Object</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>errorMessage</name>
                <value>
                    <elementReference>$Flow.FaultMessage</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>node</name>
                <value>
                    <stringValue>Survey &amp; Closure</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Update Error Details</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Escalation_Process</name>
        <label>Escalation Process</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Check_if_Case_is_Closed</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <exitConditions>
            <leftValueReference>$Record.Status</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <stringValue>Closed</stringValue>
            </rightValue>
        </exitConditions>
        <stageSteps>
            <name>Tier2_Agent_Assignment_Flow</name>
            <actionName>Tier2_Agent_Assignment_Flow</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>caseType</name>
                <value>
                    <elementReference>$Record.Type</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Tier2 Agent Assignment Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Supervisor_Approval_Flow</name>
            <actionName>Supervisor_Approval_Flow</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Tier2_Agent_Assignment_Flow.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Supervisor Approval Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Tier_2_Resolution_Flow</name>
            <actionName>Tier_2_Resolution_Flow</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Supervisor_Approval_Flow.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailSubject</name>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailBody</name>
            </inputParameters>
            <label>Tier 2 Resolution Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Handle_Error</name>
        <label>Handle Error</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Update_Error_Details_on_Case_Object</name>
            <actionName>Update_Error_Details_on_Case_Object</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>errorMessage</name>
                <value>
                    <elementReference>$Flow.FaultMessage</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>node</name>
                <value>
                    <stringValue>Triage_and_Route</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Update Error Details on Case Object</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Initial_Resolution</name>
        <label>Initial Resolution</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Check_if_a_Case_is_Escalated</targetReference>
        </connector>
        <exitConditionLogic>or</exitConditionLogic>
        <exitConditions>
            <leftValueReference>$Record.Status</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <stringValue>Closed</stringValue>
            </rightValue>
        </exitConditions>
        <exitConditions>
            <leftValueReference>$Record.Status</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <stringValue>Escalated</stringValue>
            </rightValue>
        </exitConditions>
        <exitConditions>
            <leftValueReference>$Record.Status</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <stringValue>Pending Customer Response</stringValue>
            </rightValue>
        </exitConditions>
        <faultConnector>
            <targetReference>InitialResolution</targetReference>
        </faultConnector>
        <stageSteps>
            <name>Customer_Info_Request_Flow</name>
            <actionName>Customer_Info_Request_Flow</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailSubject</name>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailBody</name>
            </inputParameters>
            <label>Customer Info Request Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Escalation_Preparation_Flow</name>
            <actionName>Escalation_Preparation_Flow</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Customer_Info_Request_Flow.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>escalationReason</name>
                <value>
                    <elementReference>$Record.Escalation_Reason__c</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Escalation Preparation Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>InitialResolution</name>
        <label>Initial Resolution Error Handling</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <name>Update_Error_DetailsCase_Object</name>
            <actionName>Update_Error_Details_on_Case_Object</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>errorMessage</name>
                <value>
                    <elementReference>$Flow.FaultMessage</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>node</name>
                <value>
                    <stringValue>Initial Resolution Error Handling</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Update Error Details on Case Object</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Survey_and_Closure</name>
        <label>Survey and Closure</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <exitConditions>
            <leftValueReference>$Record.Survey_Sent__c</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <booleanValue>true</booleanValue>
            </rightValue>
        </exitConditions>
        <faultConnector>
            <targetReference>Error_Handling_Stage</targetReference>
        </faultConnector>
        <stageSteps>
            <name>Survey_Generation_Flow</name>
            <actionName>Survey_Generation_Flow</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Survey Generation Flow</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Case_Final_Closure</name>
            <actionName>Case_Final_Closure</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Survey_Generation_Flow.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Case Final Closure</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Interactive_Step_3_of_Survey_and_Closure</name>
            <actionName>Customer_Follow_up_Flow</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.OwnerId</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Case_Final_Closure.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailSubject</name>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailBody</name>
            </inputParameters>
            <label>Interactive Step 3 of Survey and Closure</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <name>Triage_and_Route</name>
        <label>Triage &amp; Route</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Initial_Resolution</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <exitConditions>
            <leftValueReference>$Record.Status</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <stringValue>In Progress</stringValue>
            </rightValue>
        </exitConditions>
        <faultConnector>
            <targetReference>Handle_Error</targetReference>
        </faultConnector>
        <stageSteps>
            <name>Case_Classification</name>
            <actionName>Case_Classification</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Case Classification</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Agent_Assignment</name>
            <actionName>Case_Agent_Assignment_Flow</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Case_Classification.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>caseType</name>
                <value>
                    <elementReference>$Record.Type</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Agent Assignment</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
        <stageSteps>
            <name>Agent_Triage</name>
            <actionName>Agent_Triage_Screen_Flow</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <entryConditions>
                <conditionType>EntryCondition</conditionType>
                <leftValueReference>Agent_Assignment.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </entryConditions>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>recordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailSubject</name>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__CustomEmailBody</name>
            </inputParameters>
            <label>Agent Triage</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Orchestrator</processType>
    <start>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Check_if_Case_is_New_or_Existing</targetReference>
        </connector>
        <object>Case</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Obsolete</status>
</Flow>
